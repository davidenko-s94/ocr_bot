import asyncio
import os

from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters, CommandHandler
import pytesseract
from PIL import Image
import tempfile
import nest_asyncio

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===

# –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ Tesseract (—Ç–æ–ª—å–∫–æ –¥–ª—è Windows)
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

# === –§—É–Ω–∫—Ü–∏—è OCR ===
def ocr_image(image_path):
    try:
        img = Image.open(image_path)
        text = pytesseract.image_to_string(img, lang='eng+rus')  # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—Å—Å–∫–æ–≥–æ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
        return text.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}"

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –Ω–∞ –Ω—ë–º —Ç–µ–∫—Å—Ç.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚ÑπÔ∏è –≠—Ç–æ OCR-–±–æ—Ç. –û–Ω —Ä–∞—Å–ø–æ–∑–Ω–∞—ë—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö.\n\n"
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "1. –°–¥–µ–ª–∞–π —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.\n"
        "2. –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å—é–¥–∞.\n"
        "3. –ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."
    )
    await update.message.reply_text(text)

async def ocr_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üì∏ –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR:\n"
        "1. –°–¥–µ–ª–∞–π—Ç–µ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞.\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞.\n"
        "3. –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –µ–≥–æ –∫–æ–ø–∏—é."
    )
    await update.message.reply_text(text)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ ===
import time

from datetime import datetime

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∑ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    photo = update.message.photo[-1]
    file = await photo.get_file()

    with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmpfile:
        tmp_path = tmpfile.name
        await file.download_to_drive(tmp_path)

    extracted_text = ocr_image(tmp_path)
    os.unlink(tmp_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

    if extracted_text:
        # === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç–æ–π ===
        SAVE_DIR = "ocr_results"
        os.makedirs(SAVE_DIR, exist_ok=True)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        username = user.username or f"{user.first_name}_{user.last_name}" or "unknown_user"
        username = username.replace(" ", "_")  # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã

        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

        # –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        photo_path = os.path.join(SAVE_DIR, f"{username}_{now}_photo.jpg")
        text_path = os.path.join(SAVE_DIR, f"{username}_{now}_text.txt")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo_file = await photo.get_file()
        await photo_file.download_to_drive(photo_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
        with open(text_path, "w", encoding="utf-8") as f:
            f.write(extracted_text)

        # === –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ===

        await update.message.reply_text(f"üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
        await update.message.reply_text(f"{extracted_text}")

    else:
        await update.message.reply_text("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    await app.bot.set_my_commands([
        ('start', '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        ('help', '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å'),
        ('ocr', '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å OCR')
    ])

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("ocr", ocr_command))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
